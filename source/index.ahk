; Generated by Coffee-AHK/0.0.35
global __ci_genshin__ := Func("genshin_103")
if (A_IsAdmin != true) {
  Run *RunAs "%A_ScriptFullPath%"
  ExitApp
}
#HotkeyInterval, 1000
#KeyHistory, 0
#MaxHotkeysPerInterval, 200
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, 100ms
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On
; Generated by Coffee-AHK/0.0.29
global __ci_jsShim__ := Func("jsShim_53")
global $ := {}
$.beep := Func("jsShim_52")
$.blockInput := Func("jsShim_51")
$.click := Func("jsShim_50")
global __index_debounce__ := 0
global __timer_debounce__ := {}
$.debounce := Func("jsShim_49")
$.delay := Func("jsShim_47")
$.exit := Func("jsShim_46")
$.findColor := Func("jsShim_45")
$.findImage := Func("jsShim_44")
$.formatHotkey := Func("jsShim_43")
$.getColor := Func("jsShim_42")
$.getPosition := Func("jsShim_41")
$.getState := Func("jsShim_40")
$.i := Func("jsShim_39")
$.includes := Func("jsShim_38")
$.info := Func("jsShim_37")
$.length := Func("jsShim_36")
$.move := Func("jsShim_35")
$.now := Func("jsShim_34")
$.off := Func("jsShim_33")
$.on := Func("jsShim_32")
$.open := Func("jsShim_31")
$.play := Func("jsShim_30")
$.press := Func("jsShim_29")
$.push := Func("jsShim_28")
$.random := Func("jsShim_27")
$.reload := Func("jsShim_26")
$.replace := Func("jsShim_25")
$.reverse := Func("jsShim_24")
$.setFixed := Func("jsShim_23")
$.sleep := Func("jsShim_22")
$.split := Func("jsShim_21")
$.suspend := Func("jsShim_20")
global __index_throttle__ := 0
global __timer_throttle__ := {}
global __ts_throttle__ := {}
$.throttle := Func("jsShim_19")
$.toLowerCase := Func("jsShim_16")
$.toString := Func("jsShim_15")
$.toUpperCase := Func("jsShim_14")
$.trim := Func("jsShim_13")
$.trimEnd := Func("jsShim_12")
$.trimStart := Func("jsShim_11")
$.type := Func("jsShim_10")
global alert := Func("jsShim_9")
global clearInterval := Func("jsShim_8")
global clearTimeout := Func("jsShim_7")
global Math := {abs: Func("jsShim_6"), ceil: Func("jsShim_5"), floor: Func("jsShim_4"), round: Func("jsShim_3")}
global setInterval := Func("jsShim_2")
global setTimeout := Func("jsShim_1")
jsShim_1(callback, time) {
  if (($.type.Call(callback)) == "function") {
    callback := callback.Bind()
  }
  __type__ := $.type.Call(time)
  if !(__type__ == "number") {
    throw Exception("setTimeout: invalid time type '" . (__type__) . "'")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
jsShim_2(callback, time) {
  if (($.type.Call(callback)) == "function") {
    callback := callback.Bind()
  }
  __type__ := $.type.Call(time)
  if !(__type__ == "number") {
    throw Exception("setTimeout: invalid time type '" . (__type__) . "'")
  }
  if !(time > 0) {
    throw Exception("setTimeout: invalid time value '" . (time) . "'")
  }
  SetTimer, % callback, % time
  return callback
}
jsShim_3(n) {
  return Round(n)
}
jsShim_4(n) {
  return Floor(n)
}
jsShim_5(n) {
  return Ceil(n)
}
jsShim_6(n) {
  return Abs(n)
}
jsShim_7(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
jsShim_8(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
jsShim_9(message := "") {
  __msg__ := $.toString.Call(message)
  MsgBox, % __msg__
}
jsShim_10(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      return "array"
    }
    return "object"
  }
  return "string"
}
jsShim_11(input, omitting := " `t") {
  return LTrim(input, omitting)
}
jsShim_12(input, omitting := " `t") {
  return RTrim(input, omitting)
}
jsShim_13(input, omitting := " `t") {
  return Trim(input, omitting)
}
jsShim_14(input) {
  StringUpper, __result__, input
  return __result__
}
jsShim_15(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
jsShim_16(input) {
  StringLower, __result__, input
  return __result__
}
jsShim_17(callback, index) {
  callback.Call()
  __ts_throttle__[__ci_jsShim__.Call(index)] := $.now.Call()
}
jsShim_18(callback, time, index) {
  clearTimeout.Call(__timer_throttle__[__ci_jsShim__.Call(index)])
  __timer_throttle__[__ci_jsShim__.Call(index)] := setTimeout.Call(Func("jsShim_17").Bind(callback, index), __ts_throttle__[__ci_jsShim__.Call(index)] - $.now.Call() + time)
}
jsShim_19(time, callback) {
  __index_throttle__++
  __ts_throttle__[__ci_jsShim__.Call(__index_throttle__)] := 0
  return Func("jsShim_18").Bind(callback, time, __index_throttle__)
}
jsShim_20(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
jsShim_21(input, delimiter) {
  return StrSplit(input, delimiter)
}
jsShim_22(time) {
  Sleep, % time
}
jsShim_23(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
jsShim_24(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    throw Exception("$.reverse: invalid type '" . (__type__) . "'")
  }
  __len__ := $.length.Call(input)
  __output_as_array__ := []
  for i, key in input {
    i := i - 1
    __output_as_array__[__ci_jsShim__.Call(__len__ - 1 - i)] := key
  }
  return __output_as_array__
}
jsShim_25(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
jsShim_26() {
  Reload
}
jsShim_27(min := 0, max := 1) {
  Random, __result__, min, max
  return __result__
}
jsShim_28(list, item) {
  list.Push(item)
  return list
}
jsShim_29(listInput*) {
  if !($.length.Call(listInput)) {
    throw Exception("$.press: invalid key")
  }
  __listKey__ := []
  for __index_for__, input in listInput {
    __input__ := $.toLowerCase.Call(input)
    __input__ := $.replace.Call(__input__, " ", "")
    __input__ := $.replace.Call(__input__, "-", "")
    __list__ := $.split.Call(__input__, "+")
    for __index_for__, it in __list__ {
      __listKey__.Push(it)
    }
  }
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for i, key in __listKey__ {
    i := i - 1
    if (i == __len__ - 1) {
      __listResult__[__ci_jsShim__.Call(i)] := $.split.Call(key, ":")
      continue
    }
    if ($.includes.Call(key, ":")) {
      __listResult__[__ci_jsShim__.Call(i)] := $.split.Call(key, ":")
      __listResult__[__ci_jsShim__.Call((__len__ - 1) * 2 - i)] := $.split.Call(key, ":")
    } else {
      __listResult__[__ci_jsShim__.Call(i)] := [key, "down"]
      __listResult__[__ci_jsShim__.Call((__len__ - 1) * 2 - i)] := [key, "up"]
    }
  }
  for i, it in __listResult__ {
    i := i - 1
    if (it[1] == "win") {
      it[1] := "lwin"
    }
    __listResult__[__ci_jsShim__.Call(i)] := $.trim.Call("" . (it[1]) . " " . (it[2]) . "")
  }
  __output_as_string__ := ""
  for __index_for__, it in __listResult__ {
    __output_as_string__ := "" . (__output_as_string__) . "{" . (it) . "}"
  }
  Send, % __output_as_string__
}
jsShim_30(filename) {
  SoundPlay, % filename
}
jsShim_31(source) {
  Run, % source
}
jsShim_32(key, callback) {
  key := "$" . ($.formatHotkey.Call(key)) . ""
  Hotkey, % key, % callback, On
}
jsShim_33(key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, Off
}
jsShim_34() {
  return A_TickCount
}
jsShim_35(point := "", speed := 0) {
  if !(point) {
    throw Exception("$.move: invalid point")
  }
  MouseMove, point[1], point[2], speed
}
jsShim_36(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
jsShim_37(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
jsShim_38(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, it in input {
      if (it == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
jsShim_39(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
jsShim_40(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
jsShim_41() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
jsShim_42(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
jsShim_43(key) {
  __listkey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  _list := $.split.Call(__key__, "+")
  for __index_for__, it in _list {
    __listkey__.Push(it)
  }
  __isAlt__ := false
  __isCtrl__ := false
  __isShift__ := false
  __isWin__ := false
  __listResult__ := []
  for __index_for__, key in __listkey__ {
    if (key == "alt") {
      __isAlt__ := true
      continue
    }
    if (key == "ctrl") {
      __isCtrl__ := true
      continue
    }
    if (key == "shift") {
      __isShift__ := true
      continue
    }
    if (key == "win") {
      __isWin__ := true
      continue
    }
    __listResult__.Push(key)
  }
  __prefix__ := ""
  if (__isAlt__) {
    __prefix__ := "" . (__prefix__) . "!"
  }
  if (__isCtrl__) {
    __prefix__ := "" . (__prefix__) . "^"
  }
  if (__isShift__) {
    __prefix__ := "" . (__prefix__) . "+"
  }
  if (__isWin__) {
    __prefix__ := "" . (__prefix__) . "#"
  }
  __result__ := ""
  for __index_for__, it in __listResult__ {
    __result__ := "" . (__result__) . " & " . (it) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
jsShim_44(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
jsShim_45(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
jsShim_46() {
  ExitApp
}
jsShim_47(time, callback) {
  __timer__ := setTimeout.Call(callback, time)
  return __timer__
}
jsShim_48(callback, time, index) {
  clearTimeout.Call(__timer_debounce__[__ci_jsShim__.Call(index)])
  __timer_debounce__[__ci_jsShim__.Call(index)] := setTimeout.Call(callback, time)
}
jsShim_49(time, callback) {
  __index_debounce__++
  return Func("jsShim_48").Bind(callback, time, __index_debounce__)
}
jsShim_50(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
jsShim_51(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
jsShim_52() {
  SoundBeep
}
jsShim_53(input) {
  if input is Number
    return input + 1
  return input
}

global state := {}
global timer := {}
global ts := {}
class EmitterX {
  bus := []
  emit := Func("genshin_102").Bind(this)
  off := Func("genshin_101").Bind(this)
  on := Func("genshin_100").Bind(this)
}
class TickerX extends EmitterX {
  interval := 100
  max := 1000
  tick := 0
  __New() {
    base.__New()
    setInterval.Call(this.update, this.interval)
  }
  update := Func("genshin_99").Bind(this)
}
global ticker := new TickerX()
class ConfigX {
  data := {}
  source := "config.ini"
  __New() {
    this.data.process := this.read.Call("region/process", "YuanShen.exe")
    for __index_for__, key in ["autoESkill", "betterElementalVision", "betterJump", "betterSprint", "easySkillTimer", "fastPickup"] {
      this.data[__ci_genshin__.Call(key)] := this.read.Call("feature/enable" . (key) . "", 1)
    }
  }
  read := Func("genshin_98").Bind(this)
}
global Config := new ConfigX()
class ClientX extends EmitterX {
  height := 0
  isSuspend := false
  width := 0
  __New() {
    base.__New()
    this.setSize.Call()
  }
  check := Func("genshin_97").Bind(this)
  checkActive := Func("genshin_96").Bind(this)
  point := Func("genshin_95").Bind(this)
  reset := Func("genshin_94").Bind(this)
  resetTimer := Func("genshin_93").Bind(this)
  setSize := Func("genshin_92").Bind(this)
  suspend := Func("genshin_91").Bind(this)
  setPriority := Func("genshin_90").Bind(this)
  vh := Func("genshin_89").Bind(this)
  vw := Func("genshin_88").Bind(this)
}
global client := new ClientX()
ticker.on.Call("change", Func("genshin_87"))
class HudX {
  lifetime := 5000
  listTimer := {}
  __New() {
    client.on.Call("leave", this.hide)
  }
  getColor := Func("genshin_86").Bind(this)
  getPosition := Func("genshin_85").Bind(this)
  hide := Func("genshin_84").Bind(this)
  render := Func("genshin_83").Bind(this)
  reset := Func("genshin_81").Bind(this)
}
global hud := new HudX()
class StatusCheckerX {
  isActive := false
  __New() {
    client.on.Call("leave", this.reset)
  }
  check := Func("genshin_80").Bind(this)
  checkIsActive := Func("genshin_79").Bind(this)
  reset := Func("genshin_78").Bind(this)
}
global statusChecker := new StatusCheckerX()
ticker.on.Call("change", Func("genshin_77"))
global __character__ := {aether: {color: 0}, albedo: {color: 0}, amber: {cd: 15, color: 6048867}, ayaka: {color: 0}, barbara: {cd: 32, color: 14603198}, beidou: {cd: 7.5, color: 4993838, typeE: 1}, bennett: {cd: [5, 10], color: 16511951}, chongyun: {cd: 15, color: 13496287}, diluc: {color: 0}, diona: {cd: [6, 15], color: 16701134}, fischl: {cd: 25, color: 16769961, typeE: 1}, ganyu: {cd: 10, color: 12438725}, hu_tao: {cd: 16, color: 8084321}, jean: {cd: 6, color: 15126691, typeE: 1}, kaeya: {cd: 6, color: 3755620}, keqing: {cd: 7.5, color: 12497347, typeE: 1}, klee: {cd: 20, color: 12466702}, lisa: {cd: [1, 16], color: 11970203}, lumine: {color: 0}, mona: {cd: 12, color: 5918820}, ningguang: {cd: 12, color: 16711134}, noelle: {cd: 24, color: 14604498}, qiqi: {cd: 30, color: 14801886}, rezor: {cd: [6, 10], color: 13028038}, rosaria: {color: 0}, sucrose: {cd: 15, color: 13953484}, tartaglia: {cd: 6, color: 14716223}, venti: {cd: [6, 15], color: 6132094}, xiangling: {cd: 12, color: 2241403}, xiao: {cd: 10, color: 3754046}, xingqiu: {cd: 21, color: 4753554}, xinyan: {cd: 18, color: 5258048}, zhongli: {cd: [4, 12], color: 4928805}}
class CharacterX {
  data := __character__
  __New() {
    for name, char in this.data {
      if !(char.cd) {
        char.cd := [0, 0]
      }
      if (($.type.Call(char.cd)) == "number") {
        char.cd := [char.cd, char.cd]
      }
      char.typeApr := Config.read.Call("" . (name) . "/type-apr", 1)
      char.typeAtk := Config.read.Call("" . (name) . "/type-atk", 1)
      if !(char.typeE) {
        char.typeE := 0
      }
    }
  }
}
global Character := new CharacterX()
class MemberX {
  current := 0
  map := {}
  name := ""
  checkCharacterByPosition := Func("genshin_76").Bind(this)
  getRange := Func("genshin_75").Bind(this)
  scan := Func("genshin_74").Bind(this)
  toggle := Func("genshin_73").Bind(this)
}
global member := new MemberX()
class SkillTimerX {
  listCountDown := {}
  listRecord := {}
  check := Func("genshin_72").Bind(this)
  hide := Func("genshin_71").Bind(this)
  record := Func("genshin_70").Bind(this)
  recordEnd := Func("genshin_69").Bind(this)
  recordStart := Func("genshin_68").Bind(this)
  reset := Func("genshin_67").Bind(this)
}
global skillTimer := new SkillTimerX()
if (Config.data.easySkillTimer) {
  ticker.on.Call("change", Func("genshin_66"))
}
class RecorderX {
  isActive := false
  list := []
  listIgnore := []
  ts := 0
  __New() {
    client.on.Call("leave", this.stop)
    $.on.Call("ctrl + r", Func("genshin_65").Bind(this))
  }
  ignore := Func("genshin_64").Bind(this)
  record := Func("genshin_63").Bind(this)
  save := Func("genshin_62").Bind(this)
  start := Func("genshin_61").Bind(this)
  stop := Func("genshin_60").Bind(this)
}
global recorder := new RecorderX()
class KeyBindingX extends EmitterX {
  isPressed := {}
  isPrevented := {}
  __New() {
    base.__New()
    client.on.Call("leave", this.resetKey)
  }
  bindEvent := Func("genshin_59").Bind(this)
  press := Func("genshin_56").Bind(this)
  resetKey := Func("genshin_55").Bind(this)
}
class PlayerX extends KeyBindingX {
  isMoving := false
  __New() {
    base.__New()
    for __index_for__, key in [1, 2, 3, 4] {
      this.bindEvent.Call("toggle", key)
    }
    this.bindEvent.Call("attack", "l-button", "prevent").bindEvent.Call("toggle-aim", "r").bindEvent.Call("use-e", "e").bindEvent.Call("use-q", "q").bindEvent.Call("jump", "space", "prevent").bindEvent.Call("sprint", "r-button").bindEvent.Call("confirm", "y").bindEvent.Call("find", "v").bindEvent.Call("pause", "p").bindEvent.Call("pick", "f").bindEvent.Call("unhold", "x").bindEvent.Call("use-item", "z").bindEvent.Call("view", "m-button")
    for __index_for__, key in ["esc", "b", "c", "j", "m", "f1", "f2", "f3", "f4", "f5"] {
      this.bindEvent.Call("menu-" . (key) . "", key)
    }
  }
  jump := Func("genshin_54").Bind(this)
  pick := Func("genshin_53").Bind(this)
  startMove := Func("genshin_52").Bind(this)
  stopMove := Func("genshin_51").Bind(this)
  toggleQ := Func("genshin_50").Bind(this)
  useE := Func("genshin_49").Bind(this)
  useQ := Func("genshin_47").Bind(this)
}
global player := new PlayerX()
class MovementX extends KeyBindingX {
  count := 0
  __New() {
    base.__New()
    for __index_for__, key in ["w", "a", "s", "d"] {
      $.on.Call(key, Func("genshin_46").Bind(key, this))
      $.on.Call("" . (key) . ":up", Func("genshin_45").Bind(key, this))
    }
    player.on.Call("move:start", Func("genshin_44")).on.Call("move:end", Func("genshin_43"))
  }
  check := Func("genshin_42").Bind(this)
  checkMove := Func("genshin_41").Bind(this)
}
global movement := new MovementX()
if (Config.data.betterElementalVision) {
  player.on.Call("find:end", Func("genshin_40"))
}
global jumpTwice := Func("genshin_38")
player.on.Call("jump:start", player.jump)
if (Config.data.betterJump) {
  player.on.Call("jump:end", jumpTwice).on.Call("unhold:end", Func("genshin_36"))
}
timer.pick := ""
global pick := Func("genshin_34")
global stopPick := Func("genshin_32")
if (Config.data.fastPickup) {
  player.on.Call("pick:start", pick).on.Call("pick:end", stopPick)
}
state.isSprinting := false
state.isSprintSwimming := false
timer.sprint := ""
ts.sprint := 0
global checkSwimming := Func("genshin_31")
global sprint := Func("genshin_30")
global startSprint := Func("genshin_28")
global stopSprint := Func("genshin_27")
player.on.Call("sprint:start", startSprint).on.Call("sprint:end", stopSprint)
if (Config.data.betterSprint) {
  player.on.Call("move:end", Func("genshin_26"))
}
state.toggleDelay := 200
global getToggleDelay := Func("genshin_25")
global startToggle := Func("genshin_24")
global stopToggle := Func("genshin_22")
player.on.Call("toggle:start", startToggle).on.Call("toggle:end", stopToggle)
for __index_for__, key in [1, 2, 3, 4] {
  $.on.Call("alt + " . (key) . "", Func("genshin_19").Bind(key))
}
if (Config.data.easySkillTimer) {
  player.on.Call("use-e:start", Func("genshin_18")).on.Call("use-e:end", Func("genshin_17"))
}
state.isViewing := false
timer.view := ""
global toggleView := Func("genshin_16")
global view := Func("genshin_15")
if (Config.data.betterElementalVision) {
  player.on.Call("view:end", toggleView)
}
class TacticX {
  count := 0
  isActive := false
  __New() {
    player.on.Call("attack:start", this.start).on.Call("attack:end", this.stop)
  }
  delay := Func("genshin_13").Bind(this)
  start := Func("genshin_12").Bind(this)
  stop := Func("genshin_11").Bind(this)
  validate := Func("genshin_10").Bind(this)
}
global tactic := new TacticX()
tactic.klee := Func("genshin_9")
global kleeAttackA := Func("genshin_8")
global kleeAttackB := Func("genshin_7")
$.on.Call("alt + enter", Func("genshin_4"))
$.on.Call("alt + f4", Func("genshin_3"))
$.on.Call("alt + f11", Func("genshin_2"))
$.on.Call("ctrl + f5", Func("genshin_1"))
$.on.Call("f12", member.scan)
genshin_1() {
  $.beep.Call()
  client.reset.Call()
  $.reload.Call()
}
genshin_2() {
  $.beep.Call()
  hud.getColor.Call()
}
genshin_3() {
  $.beep.Call()
  client.reset.Call()
  $.exit.Call()
}
genshin_4() {
  $.press.Call("alt + enter")
  $.delay.Call(1000, client.setSize)
}
genshin_5() {
  if !(player.isMoving) {
    tactic.klee.Call()
    return
  }
  player.jump.Call()
  tactic.delay.Call(600, tactic.klee)
}
genshin_6() {
  $.click.Call("left:up")
  tactic.delay.Call(200, Func("genshin_5"))
}
genshin_7() {
  $.click.Call("left:down")
  tactic.delay.Call(300, Func("genshin_6"))
}
genshin_8() {
  $.click.Call("left")
  tactic.delay.Call(100, tactic.klee)
}
genshin_9() {
  if !(tactic.isActive) {
    return
  }
  if (tactic.count > 1) {
    tactic.count := 0
  }
  switch tactic.count {
    case 0: {
      kleeAttackA.Call()
    }
    case 1: {
      kleeAttackB.Call()
    }
  }
  tactic.count++
}
genshin_10(this) {
  name := member.name
  if !(name) {
    return false
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeAtk := __object__["typeAtk"]
  if !(typeAtk) {
    return false
  }
  if !(this[__ci_genshin__.Call(name)]) {
    return false
  }
  if !(statusChecker.isActive) {
    return false
  }
  return this[__ci_genshin__.Call(name)]
}
genshin_11(this) {
  if (this.isActive) {
    this.count := 0
    this.isActive := false
    return
  }
  $.click.Call("left:up")
}
genshin_12(this) {
  if (this.isActive) {
    return
  }
  callback := this.validate.Call()
  if !(callback) {
    $.click.Call("left:down")
    return
  }
  this.isActive := true
  callback.Call()
}
genshin_13(this, time, callback) {
  if !(this.isActive) {
    return
  }
  clearTimeout.Call(timer.tacticDelay)
  timer.tacticDelay := $.delay.Call(time, callback)
}
genshin_14() {
  $.click.Call("middle:up")
}
genshin_15() {
  $.click.Call("middle:down")
  setTimeout.Call(Func("genshin_14"), 2500)
}
genshin_16() {
  clearInterval.Call(timer.view)
  state.isViewing := !state.isViewing
  if !(state.isViewing) {
    return
  }
  timer.view := setInterval.Call(view, 3000)
  view.Call()
}
genshin_17() {
  skillTimer.record.Call("end")
}
genshin_18() {
  skillTimer.record.Call("start")
}
genshin_19(key) {
  player.toggleQ.Call(key)
}
genshin_20() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_21() {
  player.useE.Call("holding")
}
genshin_22(key) {
  if !(Config.data.autoESkill) {
    return
  }
  __object__ := member
  name := __object__["name"]
  if !(name) {
    return
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if (typeApr == 2) {
    $.delay.Call(state.toggleDelay, player.useE)
    return
  }
  if (typeApr == 3) {
    $.delay.Call(state.toggleDelay, Func("genshin_21"))
    return
  }
  if (typeApr == 4) {
    $.delay.Call(state.toggleDelay, player.useQ)
    return
  }
  $.delay.Call(state.toggleDelay, Func("genshin_20"))
}
genshin_23() {
  $.press.Call("e:down")
  skillTimer.record.Call("start")
}
genshin_24(key) {
  member.toggle.Call(key)
  if !(Config.data.autoESkill) {
    return
  }
  __object__ := member
  name := __object__["name"]
  if !(name) {
    return
  }
  state.toggleDelay := getToggleDelay.Call()
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if !(typeApr == 1) {
    return
  }
  $.delay.Call(state.toggleDelay, Func("genshin_23"))
}
genshin_25() {
  delay := 500 - ($.now.Call() - ts.sprint)
  if (delay < 200) {
    delay := 200
  }
  return delay
}
genshin_26() {
  if !(state.isSprinting) {
    return
  }
  if (player.isMoving) {
    return
  }
  player.startMove.Call("w")
}
genshin_27() {
  ts.sprint := $.now.Call()
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := false
  state.isSprintSwimming := false
  clearTimeout.Call(timer.sprint)
  player.stopMove.Call("w")
}
genshin_28() {
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := true
  sprint.Call()
}
genshin_29() {
  if (state.isSprintSwimming) {
    state.isSprintSwimming := false
    $.click.Call("right:down")
  }
  sprint.Call()
}
genshin_30() {
  if !(player.isMoving) {
    player.startMove.Call("w")
  }
  if !(checkSwimming.Call()) {
    state.isSprintSwimming := true
    $.click.Call("right:up")
  }
  clearTimeout.Call(timer.sprint)
  timer.sprint := $.delay.Call(1300, Func("genshin_29"))
}
genshin_31() {
  start := client.point.Call([80, 90])
  end := [client.width, client.height]
  point := $.findColor.Call(0xFFE92C, start, end, 0.9)
  return point[1] * point[2] > 0
}
genshin_32() {
  clearTimeout.Call(timer.pick)
}
genshin_33() {
  player.pick.Call()
  pick.Call()
}
genshin_34() {
  clearTimeout.Call(timer.pick)
  timer.pick := $.delay.Call(100, Func("genshin_33"))
}
genshin_35() {
  player.jump.Call()
}
genshin_36() {
  $.delay.Call(50, Func("genshin_35"))
}
genshin_37() {
  if !(player.isMoving) {
    return
  }
  player.jump.Call()
}
genshin_38() {
  $.delay.Call(200, Func("genshin_37"))
}
genshin_39() {
  $.press.Call("m")
}
genshin_40() {
  $.delay.Call(200, Func("genshin_39"))
}
genshin_41(this) {
  count := 0
  for __index_for__, key in ["w", "a", "s", "d"] {
    if ($.getState.Call(key)) {
      count := count + 1
      if (this.isPressed[__ci_genshin__.Call(key)]) {
        continue
      }
      this.isPressed[__ci_genshin__.Call(key)] := true
      recorder.record.Call("" . (key) . ":down")
      $.press.Call("" . (key) . ":down")
    } else {
      if !(this.isPressed[__ci_genshin__.Call(key)]) {
        continue
      }
      this.isPressed[__ci_genshin__.Call(key)] := false
      recorder.record.Call("" . (key) . ":up")
      $.press.Call("" . (key) . ":up")
    }
  }
  return count
}
genshin_42(this, key, action) {
  if (action == "down" && this.isPressed[__ci_genshin__.Call(key)]) {
    return
  } else if (action == "up" && !this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  count := this.checkMove.Call()
  if (count && !this.count) {
    player.emit.Call("move:start")
  } else if (!count && this.count) {
    player.emit.Call("move:end")
  }
  this.count := count
}
genshin_43() {
  if !(player.isMoving) {
    return
  }
  player.isMoving := false
}
genshin_44() {
  if (player.isMoving) {
    return
  }
  player.isMoving := true
}
genshin_45(key, this) {
  this.check.Call(key, "up")
}
genshin_46(key, this) {
  this.check.Call(key, "down")
}
genshin_47(this) {
  $.press.Call("q")
  return this
}
genshin_48() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_49(this, isHolding := false) {
  if !(isHolding) {
    $.press.Call("e")
    skillTimer.record.Call("start")
    skillTimer.record.Call("end")
    return this
  }
  $.press.Call("e:down")
  skillTimer.record.Call("start")
  $.delay.Call(1000, Func("genshin_48"))
  return this
}
genshin_50(this, key) {
  $.press.Call("alt + " . (key) . "")
  member.toggle.Call(key)
  return this
}
genshin_51(this, key) {
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return this
  }
  $.press.Call("" . (key) . ":up")
  return this
}
genshin_52(this, key) {
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return this
  }
  $.press.Call("" . (key) . ":down")
  return this
}
genshin_53(this) {
  $.press.Call("f")
  $.click.Call("wheel-down")
}
genshin_54(this) {
  $.press.Call("space")
}
genshin_55(this) {
  for key, value in this.isPressed {
    if (this.isPrevented[__ci_genshin__.Call(key)]) {
      continue
    }
    if !(value) {
      continue
    }
    if ($.getState.Call(key)) {
      continue
    }
    this.press.Call("" . (key) . ":up")
  }
  return this
}
genshin_56(this, key) {
  if !($.includes.Call(key, "-button")) {
    $.press.Call(key)
    return this
  }
  if ($.includes.Call(key, "l-button")) {
    key := $.replace.Call(key, "l-button", "left")
  } else if ($.includes.Call(key, "m-button")) {
    key := $.replace.Call(key, "m-button", "middle")
  } else if ($.includes.Call(key, "r-button")) {
    key := $.replace.Call(key, "r-button", "right")
  }
  $.click.Call(key)
  return this
}
genshin_57(key, name, this) {
  if !(this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := false
  recorder.record.Call("" . (key) . ":up")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    this.press.Call("" . (key) . ":up")
  }
  this.emit.Call("" . (name) . ":end", key)
}
genshin_58(key, name, this) {
  if (this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := true
  recorder.record.Call("" . (key) . ":down")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    this.press.Call("" . (key) . ":down")
  }
  this.emit.Call("" . (name) . ":start", key)
}
genshin_59(this, name, key, prevent := false) {
  if (prevent) {
    this.isPrevented[__ci_genshin__.Call(key)] := true
  }
  $.on.Call("" . (key) . "", Func("genshin_58").Bind(key, name, this))
  $.on.Call("" . (key) . ":up", Func("genshin_57").Bind(key, name, this))
  return this
}
genshin_60(this) {
  if !(this.isActive) {
    return
  }
  this.isActive := false
  hud.render.Call(5, "stop recording")
}
genshin_61(this) {
  if (this.isActive) {
    return
  }
  this.isActive := true
  this.list := []
  this.ts := $.now.Call()
  hud.render.Call(5, "start recording")
}
genshin_62(this) {
  result := ""
  for __index_for__, item in this.list {
    result := "" . (result) . "-`n"
    for key, value in item {
      result := "" . (result) . "  " . (key) . ": " . (value) . "`n"
    }
  }
  return result
}
genshin_63(this, key) {
  if !(this.isActive) {
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  hud.render.Call(5, key)
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  now := $.now.Call()
  delay := now - this.ts
  this.ts := now
  this.list.Push({delay: delay, key: key, x: x, y: y})
}
genshin_64(this, key) {
  if !(key) {
    this.listIgnore := []
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  this.listIgnore.Push(key)
}
genshin_65(this) {
  $.beep.Call()
  if !(this.isActive) {
    this.ignore.Call("ctrl + r")
    this.start.Call()
  } else {
    this.stop.Call()
    ClipBoard := this.save.Call()
  }
}
genshin_66(tick) {
  if !(Mod(tick, 200)) {
    skillTimer.check.Call()
  }
}
genshin_67(this) {
  this.listCountDown := {}
  this.listRecord := {}
}
genshin_68(this, now) {
  n := member.current
  name := member.name
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cd := __object__["cd"]
  if (this.listRecord[__ci_genshin__.Call(n)]) {
    return
  }
  this.listRecord[__ci_genshin__.Call(n)] := now
}
genshin_69(this, now) {
  n := member.current
  name := member.name
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cd := __object__["cd"]
  typeE := __object__["typeE"]
  if !(this.listRecord[__ci_genshin__.Call(n)]) {
    return
  }
  diff := now - this.listRecord[__ci_genshin__.Call(n)]
  if (diff < 500) {
    this.listCountDown[__ci_genshin__.Call(n)] := this.listRecord[__ci_genshin__.Call(n)] + (cd[1] * 1000)
    this.listRecord[__ci_genshin__.Call(n)] := 0
    return
  }
  if (typeE == 1) {
    this.listCountDown[__ci_genshin__.Call(n)] := now + (cd[2] * 1000)
  } else {
    this.listCountDown[__ci_genshin__.Call(n)] := this.listRecord[__ci_genshin__.Call(n)] + (cd[2] * 1000)
  }
  this.listRecord[__ci_genshin__.Call(n)] := 0
}
genshin_70(this, step) {
  n := member.current
  name := member.name
  if !(name) {
    return
  }
  now := $.now.Call()
  if (this.listCountDown[__ci_genshin__.Call(n)] && this.listCountDown[__ci_genshin__.Call(n)] - now > 1000) {
    return
  }
  if (step == "end") {
    this.recordEnd.Call(now)
    return
  }
  if (step == "start") {
    this.recordStart.Call(now)
    return
  }
}
genshin_71(this, n) {
  this.listCountDown[__ci_genshin__.Call(n)] := 0
  hud.render.Call(n, "")
}
genshin_72(this) {
  if (client.isSuspend) {
    return
  }
  now := $.now.Call()
  for __index_for__, n in [1, 2, 3, 4] {
    if !(this.listCountDown[__ci_genshin__.Call(n)]) {
      continue
    }
    if (now >= this.listCountDown[__ci_genshin__.Call(n)]) {
      this.hide.Call(n)
    } else {
      diff := Math.floor.Call((now - this.listCountDown[__ci_genshin__.Call(n)]) * 0.001)
      hud.render.Call(n, "" . (diff) . "s")
    }
  }
}
genshin_73(this, n) {
  this.current := n
  this.name := this.map[__ci_genshin__.Call(n)]
}
genshin_74(this) {
  for __index_for__, n in [1, 2, 3, 4] {
    name := this.checkCharacterByPosition.Call(n)
    this.map[__ci_genshin__.Call(n)] := name
    hud.render.Call(n, name)
  }
  skillTimer.reset.Call()
  if !(this.current) {
    $.press.Call("1")
    this.toggle.Call(1)
  }
}
genshin_75(this, n) {
  start := client.point.Call([90, 9 * (n + 1)])
  end := client.point.Call([96, 9 * (n + 2)])
  return [start, end]
}
genshin_76(this, n) {
  __array__ := this.getRange.Call(n)
  pointStart := __array__[1]
  pointEnd := __array__[2]
  for name, char in Character.data {
    if !(char.color) {
      continue
    }
    point := $.findColor.Call(char.color, pointStart, pointEnd)
    if !(point[1] * point[2] > 0) {
      continue
    }
    return name
  }
  return ""
}
genshin_77(tick) {
  statusChecker.check.Call(tick)
}
genshin_78(this) {
  this.isActive := false
}
genshin_79(this) {
  start := client.point.Call([95, 5])
  end := [client.vw.Call(96), start[2] + 1]
  __array__ := $.findColor.Call(0xFFFFFF, start, end)
  x := __array__[1]
  y := __array__[2]
  return x * y > 0
}
genshin_80(this, tick) {
  if (client.isSuspend) {
    return
  }
  if !(Mod(tick, 1000)) {
    this.isActive := this.checkIsActive.Call()
  }
}
genshin_81(this) {
  for __key_for__, timer in this.listTimer {
    clearTimeout.Call(timer)
  }
  this.listTimer := {}
  this.hide.Call()
}
genshin_82(n, this) {
  this.render.Call(n, "")
}
genshin_83(this, n, msg) {
  clearTimeout.Call(this.listTimer[__ci_genshin__.Call(n)])
  this.listTimer[__ci_genshin__.Call(n)] := $.delay.Call(this.lifetime, Func("genshin_82").Bind(n, this))
  __array__ := this.getPosition.Call(n)
  x := __array__[1]
  y := __array__[2]
  id := n + 1
  ToolTip, % msg, % x, % y, % id
}
genshin_84(this) {
  for __index_for__, n in [1, 2, 3, 4, 5] {
    this.render.Call(n, "")
  }
}
genshin_85(this, n) {
  if (client.width + 100 < A_ScreenWidth) {
    left := client.width
  } else {
    left := client.vw.Call(80)
  }
  return [left, client.vh.Call(4 + 9 * (n + 1))]
}
genshin_86(this) {
  color := $.getColor.Call()
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  x1 := Math.round.Call((x * 100) / client.width)
  y1 := Math.round.Call((y * 100) / client.height)
  this.render.Call(5, "" . (x1) . ", " . (y1) . " / " . (color) . "")
  ClipBoard := color
}
genshin_87(tick) {
  if !(Mod(tick, 200)) {
    client.check.Call()
  }
}
genshin_88(this, n) {
  return Math.round.Call(this.width * n * 0.01)
}
genshin_89(this, n) {
  return Math.round.Call(this.height * n * 0.01)
}
genshin_90(this, level) {
  Process, Priority, % Config.data.process, % level
}
genshin_91(this, isSuspend) {
  if (isSuspend) {
    if (this.isSuspend) {
      return
    }
    this.isSuspend := true
    $.suspend.Call(true)
    this.resetTimer.Call()
    return
  }
  if !(isSuspend) {
    if !(this.isSuspend) {
      return
    }
    this.isSuspend := false
    $.suspend.Call(false)
    return
  }
}
genshin_92(this) {
  name := "ahk_exe " . (Config.data.process) . ""
  WinGetPos, __x__, __y__, __width__, __height__, % name
  this.width := __width__
  this.height := __height__
}
genshin_93(this) {
  for __key_for__, _timer in timer {
    clearTimeout.Call(_timer)
  }
}
genshin_94(this) {
  this.setPriority.Call("normal")
  this.resetTimer.Call()
}
genshin_95(this, input) {
  return [this.vw.Call(input[1]), this.vh.Call(input[2])]
}
genshin_96(this) {
  return WinActive("ahk_exe " . (Config.data.process) . "")
}
genshin_97(this) {
  if (!this.isSuspend && !this.checkActive.Call()) {
    this.setPriority.Call("low")
    this.suspend.Call(true)
    this.emit.Call("leave")
    return
  }
  if (this.isSuspend && this.checkActive.Call()) {
    this.setPriority.Call("normal")
    this.suspend.Call(false)
    this.emit.Call("enter")
    return
  }
}
genshin_98(this, key, defaultValue := "") {
  __array__ := $.split.Call(key, "/")
  __section__ := __array__[1]
  __key__ := __array__[2]
  IniRead, __result__, % this.source, % __section__, % __key__, % defaultValue
  return __result__
}
genshin_99(this) {
  this.tick := this.tick + this.interval
  this.emit.Call("change", this.tick)
  if (this.tick >= this.max) {
    this.tick := 0
  }
}
genshin_100(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  type := __array__[1]
  name := __array__[2]
  this.bus.Push([type, name, callback])
  return this
}
genshin_101(this, key) {
  __array__ := $.split.Call(key, ".")
  type := __array__[1]
  name := __array__[2]
  if !(type) {
    this.bus := []
    return this
  }
  if !(name) {
    busNew := []
    for __index_for__, item in this.bus {
      if (item[1] == type) {
        continue
      }
      busNew.Push(item)
    }
    this.bus := busNew
    return this
  }
  busNew := []
  for __index_for__, item in this.bus {
    if (item[1] == type && item[2] == name) {
      continue
    }
    busNew.Push(item)
  }
  this.bus := busNew
  return this
}
genshin_102(this, key, args*) {
  __array__ := $.split.Call(key, ".")
  type := __array__[1]
  name := __array__[2]
  if !(type) {
    return this
  }
  if !(name) {
    for __index_for__, item in this.bus {
      if !(item[1] == type) {
        continue
      }
      item[3].Call(args*)
    }
    return this
  }
  for __index_for__, item in this.bus {
    if !(item[1] == type && item[2] == name) {
      continue
    }
    item[3].Call(args*)
  }
  return this
}
genshin_103(input) {
  if input is Number
    return input + 1
  return input
}
